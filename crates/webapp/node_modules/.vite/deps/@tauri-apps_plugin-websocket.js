import {
  Channel,
  invoke
} from "./chunk-BQXNZQW2.js";
import "./chunk-G3PMV62Z.js";

// node_modules/@tauri-apps/plugin-websocket/dist-js/index.js
var WebSocket = class _WebSocket {
  constructor(id, listeners) {
    this.id = id;
    this.listeners = listeners;
  }
  static async connect(url, config) {
    const listeners = [];
    const onMessage = new Channel();
    onMessage.onmessage = (message) => {
      listeners.forEach((l) => {
        l(message);
      });
    };
    if (config == null ? void 0 : config.headers) {
      config.headers = Array.from(new Headers(config.headers).entries());
    }
    return await invoke("plugin:websocket|connect", {
      url,
      onMessage,
      config
    }).then((id) => new _WebSocket(id, listeners));
  }
  addListener(cb) {
    this.listeners.push(cb);
  }
  async send(message) {
    let m;
    if (typeof message === "string") {
      m = { type: "Text", data: message };
    } else if (typeof message === "object" && "type" in message) {
      m = message;
    } else if (Array.isArray(message)) {
      m = { type: "Binary", data: message };
    } else {
      throw new Error("invalid `message` type, expected a `{ type: string, data: any }` object, a string or a numeric array");
    }
    await invoke("plugin:websocket|send", {
      id: this.id,
      message: m
    });
  }
  async disconnect() {
    await this.send({
      type: "Close",
      data: {
        code: 1e3,
        reason: "Disconnected by client"
      }
    });
  }
};
export {
  WebSocket as default
};
//# sourceMappingURL=@tauri-apps_plugin-websocket.js.map
