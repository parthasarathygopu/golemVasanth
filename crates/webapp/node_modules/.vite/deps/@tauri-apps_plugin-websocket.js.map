{
  "version": 3,
  "sources": ["../../@tauri-apps/plugin-websocket/dist-js/index.js"],
  "sourcesContent": ["import { Channel, invoke } from '@tauri-apps/api/core';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nclass WebSocket {\n    constructor(id, listeners) {\n        this.id = id;\n        this.listeners = listeners;\n    }\n    static async connect(url, config) {\n        const listeners = [];\n        const onMessage = new Channel();\n        onMessage.onmessage = (message) => {\n            listeners.forEach((l) => {\n                l(message);\n            });\n        };\n        if (config?.headers) {\n            config.headers = Array.from(new Headers(config.headers).entries());\n        }\n        return await invoke('plugin:websocket|connect', {\n            url,\n            onMessage,\n            config\n        }).then((id) => new WebSocket(id, listeners));\n    }\n    addListener(cb) {\n        this.listeners.push(cb);\n    }\n    async send(message) {\n        let m;\n        if (typeof message === 'string') {\n            m = { type: 'Text', data: message };\n        }\n        else if (typeof message === 'object' && 'type' in message) {\n            m = message;\n        }\n        else if (Array.isArray(message)) {\n            m = { type: 'Binary', data: message };\n        }\n        else {\n            throw new Error('invalid `message` type, expected a `{ type: string, data: any }` object, a string or a numeric array');\n        }\n        await invoke('plugin:websocket|send', {\n            id: this.id,\n            message: m\n        });\n    }\n    async disconnect() {\n        await this.send({\n            type: 'Close',\n            data: {\n                code: 1000,\n                reason: 'Disconnected by client'\n            }\n        });\n    }\n}\n\nexport { WebSocket as default };\n"],
  "mappings": ";;;;;;;AAKA,IAAM,YAAN,MAAM,WAAU;AAAA,EACZ,YAAY,IAAI,WAAW;AACvB,SAAK,KAAK;AACV,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,aAAa,QAAQ,KAAK,QAAQ;AAC9B,UAAM,YAAY,CAAC;AACnB,UAAM,YAAY,IAAI,QAAQ;AAC9B,cAAU,YAAY,CAAC,YAAY;AAC/B,gBAAU,QAAQ,CAAC,MAAM;AACrB,UAAE,OAAO;AAAA,MACb,CAAC;AAAA,IACL;AACA,QAAI,iCAAQ,SAAS;AACjB,aAAO,UAAU,MAAM,KAAK,IAAI,QAAQ,OAAO,OAAO,EAAE,QAAQ,CAAC;AAAA,IACrE;AACA,WAAO,MAAM,OAAO,4BAA4B;AAAA,MAC5C;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC,EAAE,KAAK,CAAC,OAAO,IAAI,WAAU,IAAI,SAAS,CAAC;AAAA,EAChD;AAAA,EACA,YAAY,IAAI;AACZ,SAAK,UAAU,KAAK,EAAE;AAAA,EAC1B;AAAA,EACA,MAAM,KAAK,SAAS;AAChB,QAAI;AACJ,QAAI,OAAO,YAAY,UAAU;AAC7B,UAAI,EAAE,MAAM,QAAQ,MAAM,QAAQ;AAAA,IACtC,WACS,OAAO,YAAY,YAAY,UAAU,SAAS;AACvD,UAAI;AAAA,IACR,WACS,MAAM,QAAQ,OAAO,GAAG;AAC7B,UAAI,EAAE,MAAM,UAAU,MAAM,QAAQ;AAAA,IACxC,OACK;AACD,YAAM,IAAI,MAAM,sGAAsG;AAAA,IAC1H;AACA,UAAM,OAAO,yBAAyB;AAAA,MAClC,IAAI,KAAK;AAAA,MACT,SAAS;AAAA,IACb,CAAC;AAAA,EACL;AAAA,EACA,MAAM,aAAa;AACf,UAAM,KAAK,KAAK;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,QACF,MAAM;AAAA,QACN,QAAQ;AAAA,MACZ;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;",
  "names": []
}
